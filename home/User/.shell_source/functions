incognito() {
  case $1 in
    start)
    set +o history;;
    stop)
    set -o history;;
    *)
    echo -e "USAGE: incognito start - disable command history.
       incognito stop  - enable command history.";;
  esac
}

extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }         # Creates an archive (*.tar.gz) from given directory
function makezip() { zip -r "${1%%/}.zip" "$1" ; }                    # Create a ZIP archive of a file or folder.




#----------------------------------------------------comment --------------------------------------------------

### Runs a ls immediately when you're inside a file. 
#cl() {
# if [ -d $1 ] ; then
#	cd $1
#	ls 
# else
#	echo "'$1' not a dir..."
# fi
#}
###
### transfer
#function transfer
#    if test (count $argv) -eq 0
#        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
#        return 1
#    end

#    ## get temporarily filename, output is written to this file show progress can be showed
#    set tmpfile ( mktemp -t transferXXX )

#    ## upload stdin or file
#    set file $argv[1]

#    #if tty -s;
#    #then
#        set basefile (basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

    #    if [ ! -e $file ];
    #    then
    #        echo "File $file doesn't exists."
    #        return 1
    #    fi

#        if test -d $file
#           # zip directory and transfer
#            set zipfile ( mktemp -t transferXXX.zip )
#            # echo (dirname $file)
#            #cd (dirname $file) and echo (pwd)
#            zip -r -q - $file >> $zipfile
#            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
#            rm -f $zipfile
#        else
#            # transfer file
#            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
#        end
#    #else
#    #    # transfer pipe
#    #    curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
#    #fi

#    ## cat output link
#    cat $tmpfile

#    ## cleanup
#    rm -f $tmpfile
#end
###

### allcolor
#function allcolors() {
#    # credit to http://askubuntu.com/a/279014
#    for x in 0 1 4 5 7 8; do
#        for i in `seq 30 37`; do
#            for a in `seq 40 47`; do
#                echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "
#            done
#            echo
#        done
#    done
#    echo ""
#}
###

### term title
#function __makeTerminalTitle() {
#    local title=''
#
#    local CURRENT_DIR="${PWD/#$HOME/\~}"

#    if [ -n "${SSH_CONNECTION}" ]; then
#        title+="`hostname`:${CURRENT_DIR} [`whoami`@`hostname -f`]"
#    else
#        title+="${CURRENT_DIR} [`whoami`]"
#    fi

#    echo -en '\033]2;'${title}'\007'
#}
###

### list screen session
    # screen sessions
#    local SCREEN_PATHS="/var/run/screens/S-`whoami` /var/run/screen/S-`whoami` /var/run/uscreens/S-`whoami`"

#    for screen_path in ${SCREEN_PATHS}; do
#        if [ -d ${screen_path} ]; then
#            SCREEN_JOBS=`ls ${screen_path} | wc -w`
#            if [ ${SCREEN_JOBS} != 0 ]; then
#                local current_screen="$(echo ${STY} | cut -d '.' -f 1)"
#                if [ -n "${current_screen}" ]; then
#                    current_screen=":${current_screen}"
#                fi
#                PS1+=" \[${BGreen}\][s${SCREEN_JOBS}${current_screen}]\[${Color_Off}\]"
#            fi
#            break
#        fi
#    done
###

### git branch
#    if [ -x "`which git 2>&1`" ]; then
#        local branch="$(git name-rev --name-only HEAD 2>/dev/null)"

#        if [ -n "${branch}" ]; then
#            local git_status="$(git status --porcelain -b 2>/dev/null)"
#            local letters="$( echo "${git_status}" | grep --regexp=' \w ' | sed -e 's/^\s\?\(\w\)\s.*$/\1/' )"
#            local untracked="$( echo "${git_status}" | grep -F '?? ' | sed -e 's/^\?\(\?\)\s.*$/\1/' )"
#            local status_line="$( echo -e "${letters}\n${untracked}" | sort | uniq | tr -d '[:space:]' )"
#            PS1+=" \[${BBlue}\](${branch}"
#            if [ -n "${status_line}" ]; then
#                PS1+=" ${status_line}"
#            fi
#            PS1+=")\[${Color_Off}\]"
#        fi
#    fi
###

### SIZE
#function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}                  # Make your directories and files access rights sane.
###
### UPDATE title bar
#update_title_bar () {
#  #--- Initialize the PROMPT_COMMAND and trap, if the first arg is "init".
#  [[ "${1}" == "init" ]] && {
#    [[ "${PROMPT_COMMAND}" != "" ]] && PROMPT_COMMAND+=";"
#    PROMPT_COMMAND+='update_title_bar 0 ${SHELL}'
#    trap 'update_title_bar ${0}' DEBUG
#  #--- Set some text replacment defaults.
#    [[ -z "${UTB_TEXT_REPLACE[*]}" ]] && {
#      UTB_TEXT_REPLACE=(
#        "${HOME}"   '~'
#      )
#    }
#  }
#  local BCMD="${BASH_COMMAND}"
#  #--- the trap command associated with this function passes ${0} as an argument.
#  # If this valye exists, we should be able to assume that we are running in a
#  # script (or during source'ing our bashrc file(s).
#  # The idea is to skip any scripted or source'd commands.
#  local IN_SCRIPT="${1}"
#  local MANUAL_CMD="${2}"
#  #--- Entering a second arg to this function overrides the output of the command name.
#  [[ "${MANUAL_CMD}" != "" ]] && BCMD="${MANUAL_CMD}"
#  local CMDRGX="${BCMD//\\/\\\\}"; CMDRGX="${CMDRGX//\//\\\/}"; CMDRGX="${CMDRGX//\$/\\\$}"
#  CMDRGX="${CMDRGX//\{/\\\{}"; CMDRGX="${CMDRGX//\}/\\\}}"
#  #--- Skip any commands that we've deemed to be "scripted".
#  [[ "${IN_SCRIPT}" == "IN" ]] && {
#    return
#  #--- Skip any commands that exist in PROMPT_COMMAND
#  # WARNING: Bear in mind that manually-entered commands that match are also ignored.
#  } || [[ ! "${PROMPT_COMMAND}" =~ ${CMDRGX} ]] && { 
#    #--- If BCMD is trying to set the terminal title, we don't do anything.
#    [[ ! "${BCMD}" =~ \\e\]0\; ]] && {
#      local OUT=
#      #--- Make the title more noticable, if running with root privileges.
#      [[ ${EUID} == 0 ]] && OUT+="(ROOT_USER) " || OUT+="${USER}@"
#      OUT+="${HOSTNAME}:"
#      OUT+="${PWD} "
#     OUT+="[${BCMD}]"
#      local R=
#      for ((E=0; E<${#UTB_TEXT_REPLACE[@]}; E+=2)); do
#        local R="${UTB_TEXT_REPLACE[$E]}"
#        local RGX="${R//\\/\\\\}"; RGX="${RGX//\//\\\/}"; RGX="${RGX//\$/\\\$}";
#        RGX="${RGX//\{/\\\{}"; RGX="${RGX//\}/\\\}}"
#        [[ "${OUT}" =~ ${RGX} ]] && {
#          OUT="${OUT//${RGX}/${UTB_TEXT_REPLACE[$((${E}+1))]}}"
#        }
#      done
#      echo -ne "\e]0;${OUT}\007"
#    }
#  }
#} # END _update_title_bar

##--- Some stuff needs to be initialized, for things to work correctly.
#update_title_bar init
###
